# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

stages:
  - static
  - build
  - test
  - pack
  - release

flawfinder-sast:
  stage: static
  needs: []
  dependencies: []
  rules:
    - if: $CI_MERGE_REQUEST_ID
    - if: $CI_BRANCH_NAME && $CI_BRANCH_NAME != "main"
      when: never

include:
- template: Security/SAST.gitlab-ci.yml

image: app.ftlab.utu.fi/base:1.8-dev

code_quality:
  stage: static
  allow_failure: true
  needs: []
  dependencies: []
  only:
    - main
    - merge_requests
  tags:
    - docker
  script:
    - DEBIAN_FRONTEND=noninteractive TZ="Europe/London" ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone && apt update && apt install -y python3 python3-pip cppcheck
    - python3 -m pip install -U cppcheck_codequality
    - cppcheck --xml --enable=warning,style,performance --std=c++14 --suppress=*:*catch.hpp --suppress=*:*loguru.cpp --suppress=*:*json.hpp ./ 2> cppcheck_out.xml
    - cppcheck-codequality --input-file=cppcheck_out.xml --output-file=cppcheck.json
  artifacts:
    reports:
      codequality: cppcheck.json

linux:build:
  only:
    - main
    - merge_requests
    - tags
  
  stage: build
  tags:
    - docker

  script:
    - DEBIAN_FRONTEND=noninteractive TZ="Europe/London" ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone && apt update && apt install -y build-essential uuid-dev git libmsgpack-dev liburiparser-dev libgnutls28-dev cmake ninja-build cppcheck
    - mkdir build && cd build
    - cmake $CI_PROJECT_DIR -GNinja -DFTL_VERSION=$CI_COMMIT_TAG -DCMAKE_CXX_FLAGS="-fdiagnostics-color" -DUSE_CPPCHECK=TRUE -DCMAKE_BUILD_TYPE=Release -DCPACK_GENERATOR=DEB
    - ninja

  #cache:
  #  paths:
  #    - build/

  needs: []
  dependencies: []

  artifacts:
    name: ${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}
    paths:
      - build/
    expire_in: 1 hour

linux:test:
  only:
    - main
    - merge_requests
    - tags

  stage: test
  tags:
    - docker
  
  needs: ["linux:build"]
  script:
    - DEBIAN_FRONTEND=noninteractive apt update && apt install -y libmsgpackc2 liburiparser1 cmake
    - cd build
    - ctest -V --output-junit report.xml

  artifacts:
    when: always
    reports:
      junit: build/report.xml

linux:valgrind:
  only:
    - main
    - merge_requests
    - tags

  stage: test
  tags:
    - docker
  
  needs: ["linux:build"]
  script:
    - DEBIAN_FRONTEND=noninteractive apt update && apt install -y libmsgpackc2 liburiparser1 valgrind
    - cd build
    - valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all --track-origins=yes ./test/net_integration

  artifacts:
    when: always
    reports:
      junit: build/report.xml

linux:pack:
  only:
    - tags

  stage: pack
  tags:
    - docker
  
  dependencies: ["linux:build"]
  needs: ["linux:test", "linux:valgrind", "linux:build"]
  script:
    - DEBIAN_FRONTEND=noninteractive apt update && apt install -y libmsgpackc2 liburiparser1 cmake file curl
    - cd build
    - cpack
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file "../libftl-protocol-${CI_COMMIT_TAG}-Linux.deb" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/libftl-protocol/${CI_COMMIT_TAG}/libftl-protocol${CI_COMMIT_TAG}-Linux.deb"'

  artifacts:
    when: always
    paths:
      - ./*.deb
    expire_in: 1 week

### Windows

windows:build:
  only:
    - main
    - merge_requests
    - tags

  stage: build
  tags:
    - windows

  needs: []
  dependencies: []

  cache: # use artifacts instead if multiple runners available
    key: $CI_COMMIT_SHORT_SHA
    paths:
      - build/

  script:
      - Import-Module "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/Tools/Microsoft.VisualStudio.DevShell.dll"
      - Enter-VsDevShell -VsInstallPath "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/"
      - cd $CI_PROJECT_DIR
      - if (Test-Path build) { Remove-Item build/ -Recurse }
      - mkdir build
      - cd build
      - cmake -DCMAKE_GENERATOR_PLATFORM=x64 "-DFTL_VERSION=$CI_COMMIT_TAG" -DWITH_GNUTLS=TRUE -DGNUTLS_INCLUDE_DIR="C:/Build/bin/gnutls/lib/includes/" -DGNUTLS_LIBRARY="C:/Build/bin/gnutls/lib/libgnutls.dll.a" ..
      - '& MSBuild.exe beyond-protocol.sln -property:Configuration=Release -nr:false -maxCpuCount'

windows:build_debug:
  only:
    - tags

  stage: build
  tags:
    - windows

  needs: []
  dependencies: []

  cache: # use artifacts instead if multiple runners available
    key: "$CI_COMMIT_SHORT_SHA debug"
    paths:
      - build_debug/

  script:
      - Import-Module "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/Common7/Tools/Microsoft.VisualStudio.DevShell.dll"
      - Enter-VsDevShell -VsInstallPath "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/"
      - cd $CI_PROJECT_DIR
      - if (Test-Path build_debug) { Remove-Item build_debug/ -Recurse }
      - mkdir build_debug
      - cd build_debug
      - cmake -DCMAKE_GENERATOR_PLATFORM=x64 "-DFTL_VERSION=$CI_COMMIT_TAG" -DWITH_GNUTLS=TRUE -DGNUTLS_INCLUDE_DIR="C:/Build/bin/gnutls/lib/includes/" -DGNUTLS_LIBRARY="C:/Build/bin/gnutls/lib/libgnutls.dll.a" ..
      - '& MSBuild.exe beyond-protocol.sln -property:Configuration=RelWithDebInfo -nr:false -maxCpuCount'

windows:test:
  only:
    - main
    - merge_requests
    - tags
  
  stage: test

  tags:
    - windows
  needs: ["windows:build"]

  cache: # use artifacts instead if multiple runners available
    key: $CI_COMMIT_SHORT_SHA
    paths:
      - build/

  script:
    - $env:PATH+=";C:/Shared/Deploy"
    - cd build
    - ctest -V --output-on-failure --timeout 60 --output-junit report.xml

  artifacts:
    when: always
    reports:
      junit: build/report.xml

windows:pack:
  only:
    - tags
  
  stage: pack

  tags:
    - windows
  dependencies: ["windows:build"]
  needs: ["windows:test", "windows:build"]

  cache: # use artifacts instead if multiple runners available
    key: $CI_COMMIT_SHORT_SHA
    paths:
      - build/

  script:
    - $env:PATH+=";C:/Shared/Deploy"
    - cd build
    - cpack
    - Invoke-RestMethod -Headers @{ "JOB-TOKEN"="$CI_JOB_TOKEN" } -InFile "../libftl-protocol-${CI_COMMIT_TAG}-win64.zip" -uri "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/libftl-protocol/${CI_COMMIT_TAG}/libftl-protocol-${CI_COMMIT_TAG}-win64.zip" -Method put

  artifacts:
    when: always
    paths:
      - ./*.zip
    expire_in: 1 week

windows:pack_debug:
  only:
    - tags
  
  stage: pack

  tags:
    - windows
  dependencies: ["windows:build_debug"]
  needs: ["windows:test", "windows:build_debug"]

  cache: # use artifacts instead if multiple runners available
    key: "$CI_COMMIT_SHORT_SHA debug"
    paths:
      - build_debug/

  script:
    - $env:PATH+=";C:/Shared/Deploy"
    - cd build_debug
    - cpack
    - Invoke-RestMethod -Headers @{ "JOB-TOKEN"="$CI_JOB_TOKEN" } -InFile "../libftl-protocol-${CI_COMMIT_TAG}-win64.zip" -uri "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/libftl-protocol/${CI_COMMIT_TAG}/libftl-protocol-${CI_COMMIT_TAG}-win64-debug.zip" -Method put

  artifacts:
    when: always
    paths:
      - ./*.zip
    expire_in: 1 week

# Documentation

pages:
  stage: release
  script:
  - DEBIAN_FRONTEND=noninteractive apt update && apt install -y doxygen graphviz
  - doxygen docs/doxygen.conf
  - mv docs/html/ public/
  artifacts:
    paths:
    - public
  only:
    - tags

# Release

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG                  # Run this job when a tag is created manually
  script:
    - echo "running release_job"
  needs:
    - job: windows:pack
      artifacts: true
    - job: linux:pack
      artifacts: true
  
  release:
    name: 'Release $CI_COMMIT_TAG'
    description: 'Automatic CI Release'
    tag_name: '$CI_COMMIT_TAG'                                       # elsewhere in the pipeline.
    ref: '$CI_COMMIT_TAG'
    assets:
        links:
          - name: 'DEB Package x86-64'
            url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/libftl-protocol/${CI_COMMIT_TAG}/libftl-protocol${CI_COMMIT_TAG}-Linux.deb'
          - name: 'Win64 Binary (ZIP)'
            url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/libftl-protocol/${CI_COMMIT_TAG}/libftl-protocol-${CI_COMMIT_TAG}-win64.zip'
          - name: 'Win64 Debug Binary (ZIP)'
            url: '${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/libftl-protocol/${CI_COMMIT_TAG}/libftl-protocol-${CI_COMMIT_TAG}-win64-debug.zip'